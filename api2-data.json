[
  {
    "path": "/ai/veo3-fast",
    "method": "POST",
    "folder": "AI",
    "name": "VEO 3 Fast",
    "description": "Access VEO 3 AI model for generate video",
    "requiresAuth": false,
    "parameters": {
      "body": {
        "type": "raw",
        "fields": {
          "prompt": "cat walking",
          "image": ""
        }
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/ai/gpt4",
    "method": "POST",
    "folder": "AI",
    "name": "GPT-4",
    "description": "Access GPT-4 AI model for chat completion",
    "requiresAuth": false,
    "parameters": {
      "body": {
        "type": "raw",
        "fields": {
          "messages": [
            {
              "role": "system",
              "content": "Good Person"
            },
            {
              "role": "user",
              "content": "hai"
            }
          ],
          "user_id": "1234"
        }
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/download/facebook",
    "method": "GET",
    "folder": "Downloader",
    "name": "Facebook Downloader",
    "description": "Facebook Video/Audio Downloader",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "url": "https://www.facebook.com/share/r/19SU2T3AZp/"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/download/threads",
    "method": "GET",
    "folder": "Downloader",
    "name": "Threads Downloader",
    "description": "Threads Video/Photo Downloader",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "url": "https://www.threads.com/@botzaku/post/DNfndDYzcuF?xmt=AQF0ksKVn_htYsxeVk6jHiidnYHZ5_ezN3oQV8CjwemGNQ&slof=1"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/download/x",
    "method": "GET",
    "folder": "Downloader",
    "name": "X Downloader",
    "description": "X Video/Audio Downloader",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "url": "https://x.com/Yoda4ever/status/1963341228910489923?t=KUQXWkYF-3IwLC_KN6SNeA&s=19"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/download/pinterest",
    "method": "GET",
    "folder": "Downloader",
    "name": "Pinterest Downloader",
    "description": "Pinterest Video Downloader",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "url": "https://pin.it/7mO3ZoAY6"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/download/youtube",
    "method": "GET",
    "folder": "Downloader",
    "name": "YouTube Downloader",
    "description": "YouTube Video/Audio Downloader, (Available format: mp3, 144, 240, 360, 480, 720, 1080)",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "url": "https://youtube.com/shorts/e7DopmkFVZ8?si=W_x2_qyfyUkWPC40",
        "format": "mp3"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/tools/translate",
    "method": "GET",
    "folder": "Tools",
    "name": "Translator",
    "description": "Translate any text you want",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "text": "aku suka kamu",
        "to": "en"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/soundcloud/search",
    "method": "GET",
    "folder": "Music",
    "name": "Soundcloud Track Search",
    "description": "Find your favorite songs on SoundCloud",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "query": "Sigar"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/soundcloud/download",
    "method": "GET",
    "folder": "Music",
    "name": "Soundcloud Track Downloader",
    "description": "Download your favorite songs on SoundCloud",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "url": "https://soundcloud.com/shintaarsinta/sigar-2"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/file/upload",
    "method": "POST",
    "folder": "Tools",
    "name": "Uploader",
    "description": "Upload file to url with ease",
    "requiresAuth": false,
    "parameters": {
      "body": {
        "type": "form-data",
        "fields": {
          "file": "@/sdcard/Download/contoh.mp4"
        }
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/tools/check-host",
    "method": "GET",
    "folder": "Tools",
    "name": "Check Host",
    "description": "Check Host Domain, Available types: (ping, http, tcp, udp, dns, info)",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "host": "https://api.botzaku.eu.org",
        "type": "http"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/tools/tempmail",
    "method": "GET",
    "folder": "Tools",
    "name": "Tempmail Create",
    "description": "Create a temporary email",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "action": "create"
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/tools/tempmail",
    "method": "GET",
    "folder": "Tools",
    "name": "Check Inbox Tempmail",
    "description": "Check your temporary email inbox",
    "requiresAuth": false,
    "parameters": {
      "query": {
        "action": "inbox",
        "token": ""
      }
    },
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/db/auth-create",
    "method": "POST",
    "folder": "Database",
    "name": "DB Auth Create",
    "description": "Create a new API key and an initial database. Database name will be normalized and suffixed with a random 5-character string (e.g., test-ajs61).",
    "requiresAuth": false,
    "parameters": {
      "headers": {
        "Content-Type": "application/json"
      },
      "body": {
        "type": "raw",
        "fields": {
          "db": "test"
        }
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "API key and database created",
        "apiKey": "AbCdEf...token",
        "db": "test-ajs61"
      }
    }
  },
  {
    "path": "/db/list",
    "method": "GET",
    "folder": "Database",
    "name": "DB List",
    "description": "List all databases owned by the authenticated user.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>"
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Databases listed",
        "databases": [
          {
            "name": "test-ajs61",
            "collections": [
              "user"
            ],
            "createdAt": "2025-01-01T00:00:00Z",
            "exists": true
          }
        ]
      }
    }
  },
  {
    "path": "/db/create",
    "method": "POST",
    "folder": "Database",
    "name": "DB Create",
    "description": "Create an additional database for the authenticated user. The actual db folder will append a random 5-char suffix.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>",
        "Content-Type": "application/json"
      },
      "body": {
        "type": "raw",
        "fields": {
          "db": "project"
        }
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Database created",
        "db": "project-k3s9a"
      }
    }
  },
  {
    "path": "/db/delete",
    "method": "POST",
    "folder": "Database",
    "name": "DB Delete",
    "description": "Delete a specific database owned by the authenticated user.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>",
        "Content-Type": "application/json"
      },
      "body": {
        "type": "raw",
        "fields": {
          "db": "test-ajs61"
        }
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Database deleted",
        "db": "test-ajs61"
      }
    }
  },
  {
    "path": "/db/auth-edit",
    "method": "POST",
    "folder": "Database",
    "name": "Auth Edit (Metadata)",
    "description": "Edit auth metadata for the user. Typically to register/unregister collection names under a DB in auth metadata.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>",
        "Content-Type": "application/json"
      },
      "body": {
        "type": "raw",
        "fields": {
          "db": "test-ajs61",
          "addCollection": "user",
          "removeCollection": "logs"
        }
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Auth metadata updated",
        "databases": {
          "test-ajs61": {
            "name": "test-ajs61",
            "collections": [
              "user"
            ],
            "createdAt": "2025-01-01T00:00:00Z"
          }
        }
      }
    }
  },
  {
    "path": "/db/auth-delete",
    "method": "POST",
    "folder": "Database",
    "name": "Auth Delete (Purge User)",
    "description": "Delete all data owned by the authenticated user (all DBs) and remove the user from auth storage.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>"
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "All user data deleted"
      }
    }
  },
  {
    "path": "/db/collection-list",
    "method": "GET",
    "folder": "Database",
    "name": "Collection List",
    "description": "List collections for a specific database (from metadata and actual files).",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>"
      },
      "query": {
        "db": "test-ajs61"
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Collections listed",
        "db": "test-ajs61",
        "collections": [
          {
            "name": "user",
            "exists": true
          }
        ]
      }
    }
  },
  {
    "path": "/db/collection-create",
    "method": "POST",
    "folder": "Database",
    "name": "Collection Create",
    "description": "Create a collection (JSON file) under a specific database.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>",
        "Content-Type": "application/json"
      },
      "body": {
        "type": "raw",
        "fields": {
          "db": "test-ajs61",
          "collection": "user"
        }
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Collection created",
        "db": "test-ajs61",
        "collection": "user"
      }
    }
  },
  {
    "path": "/db/collection-delete",
    "method": "POST",
    "folder": "Database",
    "name": "Collection Delete",
    "description": "Delete a collection JSON file and remove it from metadata.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>",
        "Content-Type": "application/json"
      },
      "body": {
        "type": "raw",
        "fields": {
          "db": "test-ajs61",
          "collection": "user"
        }
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Collection deleted",
        "db": "test-ajs61",
        "collection": "user"
      }
    }
  },
  {
    "path": "/db/collection-edit",
    "method": "POST",
    "folder": "Database",
    "name": "Collection Insert/Update",
    "description": "Insert a new document or update an existing document by _id. Supports typed values using {\"$type\",\"$value\"} (types: string, boolean, object, array, int32, int64, date, timestamp, binary, null, undefined). No hard delete; update fields instead.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>",
        "Content-Type": "application/json"
      },
      "body": {
        "type": "raw",
        "fields": {
          "db": "test-ajs61",
          "collection": "user",
          "action": "insert",
          "document": {
            "name": "iky",
            "login": {
              "$type": "boolean",
              "$value": true
            }
          },
          "id": "only-for-update",
          "patch": {
            "login": {
              "$type": "string",
              "$value": "ok"
            },
            "test": {
              "nested": 1
            }
          }
        }
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Document inserted",
        "document": {
          "_id": "64b1f7e0e4d3bc2cfe1a2b33",
          "name": "iky",
          "login": true,
          "createdAt": "2025-01-01T00:00:00Z",
          "updatedAt": "2025-01-01T00:00:00Z"
        }
      }
    }
  },
  {
    "path": "/db/collection-get",
    "method": "POST",
    "folder": "Database",
    "name": "Collection Get",
    "description": "Same as Collection Get but using JSON body for complex projection.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>",
        "Content-Type": "application/json"
      },
      "body": {
        "type": "raw",
        "fields": {
          "db": "test-ajs61",
          "collection": "user",
          "id": "",
          "limit": 50,
          "skip": 0,
          "sortBy": "createdAt",
          "sortOrder": "desc",
          "projection": {
            "password": 0
          }
        }
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Documents listed",
        "total": 0,
        "documents": []
      }
    }
  },
  {
    "path": "/db/collection-find",
    "method": "POST",
    "folder": "Database",
    "name": "Collection Find",
    "description": "Same as Collection Find but using JSON body for complex filters.",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>",
        "Content-Type": "application/json"
      },
      "body": {
        "type": "raw",
        "fields": {
          "db": "test-ajs61",
          "collection": "user",
          "filter": {
            "$and": [
              {
                "age": {
                  "$gte": 18
                }
              },
              {
                "$or": [
                  {
                    "role": "admin"
                  },
                  {
                    "active": true
                  }
                ]
              }
            ]
          },
          "projection": {
            "password": 0
          },
          "sort": {
            "updatedAt": -1
          },
          "limit": 50,
          "skip": 0
        }
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Find completed",
        "matched": 0,
        "documents": []
      }
    }
  },
  {
    "path": "/db/collection-stats",
    "method": "GET",
    "folder": "Database",
    "name": "Collection Stats",
    "description": "Get basic stats of a collection: count, file size, lastModified, and inferred schema (field paths and types).",
    "requiresAuth": true,
    "parameters": {
      "headers": {
        "Authorization": "Bearer <apiKey>"
      },
      "query": {
        "db": "test-ajs61",
        "collection": "user"
      }
    },
    "response": {
      "type": "json",
      "example": {
        "message": "Collection stats",
        "db": "test-ajs61",
        "collection": "user",
        "count": 12,
        "fileSize": 4096,
        "lastModified": "2025-01-01T00:00:00Z",
        "schema": {
          "_id": [
            "string"
          ],
          "name": [
            "string"
          ],
          "login": [
            "boolean"
          ],
          "createdAt": [
            "string"
          ],
          "updatedAt": [
            "string"
          ]
        }
      }
    }
  },
  {
    "path": "/data/bot-server",
    "method": "GET",
    "folder": "Server",
    "name": "Bot Server",
    "description": "Check active bot server",
    "requiresAuth": false,
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/data/server",
    "method": "GET",
    "folder": "Server",
    "name": "Web Server",
    "description": "Check website server status",
    "requiresAuth": false,
    "response": {
      "type": "json",
      "example": {}
    }
  },
  {
    "path": "/data/data",
    "method": "GET",
    "folder": "Server",
    "name": "Api Path",
    "description": "Bruh...",
    "requiresAuth": false,
    "response": {
      "type": "json",
      "example": {}
    }
  }
]
