/***
 *** ᠁᠁᠁᠁᠁᠁᠁᠁᠁᠁᠁᠁᠁
 *** - Dev: FongsiDev
 *** - Contact: t.me/dashmodz
 *** - Gmail: fongsiapi@gmail.com & fgsidev@neko2.net
 *** - Group: chat.whatsapp.com/Ke94ex9fNLjE2h8QzhvEiy
 *** - Telegram Group: t.me/fongsidev
 *** - Github: github.com/Fgsi-APIs/RestAPIs/issues/new
 *** - Website: fgsi.koyeb.app
 *** ᠁᠁᠁᠁᠁᠁᠁᠁᠁᠁᠁᠁᠁
 ***/

// Scraper By Fgsi

import axios from 'axios';

export class PentestFinder {
  constructor() {
    this.ua =
      'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Mobile Safari/537.36';
    this.baseHeaders = {
      'sec-ch-ua': '"Not A(Brand";v="8", "Chromium";v="132"',
      'sec-ch-ua-mobile': '?1',
      'sec-ch-ua-platform': '"Android"',
      'user-agent': this.ua,
      'accept-language': 'ms-MY,ms;q=0.9,en-US;q=0.8,en;q=0.7',
    };
  }

  async finder(targetUrl) {
    const cookie1 = await this.#getInitialCookie();
    const cookie2 = await this.#getAuthCookie(cookie1);
    const fullCookie = `${cookie1}; ${cookie2}`;
    const scanId = await this.#startScan(fullCookie, targetUrl);
    await this.#waitForResult(scanId, fullCookie);
    return this.scanResult;
  }

  async #getInitialCookie() {
    const res = await axios.get('https://pentest-tools.com/information-gathering/find-subdomains-of-domain', {
      headers: {
        ...this.baseHeaders,
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'upgrade-insecure-requests': '1',
      },
    });
    return (res.headers['set-cookie'] || []).map(c => c.split(';')[0]).join('; ');
  }

  async #getAuthCookie(cookie1) {
    const res = await axios.post('https://pentest-tools.com/api/auth/token', '', {
      headers: {
        ...this.baseHeaders,
        cookie: cookie1,
        'origin': 'https://pentest-tools.com',
        'accept': '*/*',
        'content-length': '0',
      },
    });
    return (res.headers['set-cookie'] || []).map(c => c.split(';')[0]).join('; ');
  }

  async #startScan(cookie, target) {
    const res = await axios.post(
      'https://pentest-tools.com/api/auth/scans',
      {
        redirect_level: 'same_domain',
        target_name: target,
        tool_id: 20,
        tool_params: {
          scan_type: 'light',
          web_details: true,
          whois_info: true,
        },
      },
      {
        headers: {
          ...this.baseHeaders,
          cookie,
          'origin': 'https://pentest-tools.com',
          'content-type': 'application/json',
          'accept': 'application/json',
        },
      }
    );
    const id = res.data?.data?.created_id;
    if (!id) throw new Error('Scan creation failed.');
    return id;
  }

  async #waitForResult(scanId, cookie) {
    while (true) {
      const res = await axios.get(
        `https://pentest-tools.com/api/auth/scans_internal/${scanId}`,
        {
          headers: {
            ...this.baseHeaders,
            cookie,
            'accept': 'application/json',
          },
        }
      );
      const progress = res.data?.data?.progress;
      this.scanResult = res.data?.data;
      if (progress >= 100) break;
      await new Promise(r => setTimeout(r, 5000));
    }
  }
}

const pentest = new PentestFinder();
const result = await pentest.finder('sonivamusic.com');
console.log(JSON.stringify(result, null, 2));